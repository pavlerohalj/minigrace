classes:
confidential:
 n(1)
 x
dialect:
 standardGrace
fresh-methods:
modules:
path:
 /dev/stdin
public:
 A
 D
 H
 Z
 m(1)
 x:=(1)
 xx
publicMethod:m(1):
 m(y:Number) → Done
publicMethod:x:=(1):
 x:=(x': Number) → Done
publicMethod:xx:
 xx → Number
publicMethodTypes:
 m(y:Number) → Done
 x:=(x': Number) → Done
 xx → Number
typedec-of:A:
 type A = B⟦T⟧ | other.C | other.U⟦T⟧ | interface {
    m1(n:Number) → Number
    m2(n:Number) → Done}
typedec-of:D:
 type D = Dictionary⟦K, T⟧ & F & G
typedec-of:H⟦T⟧:
 type H⟦T⟧ = interface {
        m3(x:T) → T}
typedec-of:Z:
 type Z = interface {
    m4(x:Y) → Y} & interface {
    m5(x:Z) → Z}
types:
 A
 D
 H⟦T⟧
 Z

